#!/usr/bin/env node

import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

/**
 * Daily Profile Generator
 * Generates markdown content for both GitHub profile and web app
 */

interface ProfileContent {
  date: string;
  ascii: string;
  quote: string;
  theme: string;
}

function getCurrentDate(): string {
  return new Date().toISOString().split('T')[0];
}

function generateASCIIArt(): string {
  const asciiArts = [
    `
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ    dev(on) ‚Ä¢ daily fresh ü•ü    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò`,
    `
 _____             
|  _  \\ _____   __
| | | |/ _ \\ \\ / /
| |_| |  __/\\ V / 
|_____/ \\___| \\_/  `,
    `
[ dev ‚Ä¢ dad ‚Ä¢ dumpling ]`
  ];
  
  return asciiArts[Math.floor(Math.random() * asciiArts.length)];
}

function generateQuote(): string {
  const quotes = [
    "Code is like humor. When you have to explain it, it's bad. ‚Äî Cory House",
    "The best error message is the one that never shows up. ‚Äî Thomas Fuchs",
    "Experience is the name everyone gives to their mistakes. ‚Äî Oscar Wilde",
    "Any fool can write code that a computer can understand. Good programmers write code that humans can understand. ‚Äî Martin Fowler",
    "First, solve the problem. Then, write the code. ‚Äî John Johnson",
    "Debugging is twice as hard as writing the code in the first place. ‚Äî Brian Kernighan",
    "The only way to learn a new programming language is by writing programs in it. ‚Äî Dennis Ritchie"
  ];
  
  return quotes[Math.floor(Math.random() * quotes.length)];
}

function generateTheme(): string {
  const themes = ['minimal', 'tech', 'creative', 'professional'];
  return themes[Math.floor(Math.random() * themes.length)];
}

function generateProfileContent(): ProfileContent {
  return {
    date: getCurrentDate(),
    ascii: generateASCIIArt(),
    quote: generateQuote(),
    theme: generateTheme()
  };
}

function createMarkdown(content: ProfileContent): string {
  return `# Hi, I'm Dev(on) üëã

\`\`\`
${content.ascii}
\`\`\`

Principal Engineer @ Amino ‚Ä¢ Dad ‚Ä¢ Developer

üöÄ nurturing web architecture  
üå≥ doing the dad thing  
üìñ staying curious

> ${content.quote}

---

![Dev's GitHub stats](https://github-readme-stats.vercel.app/api?username=devdumpling&show_icons=true&theme=${content.theme})

*Auto-updated daily ‚Ä¢ ${content.date}*
`;
}

function ensureDirectoryExists(dir: string): void {
  if (!existsSync(dir)) {
    mkdirSync(dir, { recursive: true });
  }
}

function writeToHistory(content: string, date: string): void {
  const historyDir = join(process.cwd(), 'history');
  ensureDirectoryExists(historyDir);
  
  const historyFile = join(historyDir, `${date}.md`);
  writeFileSync(historyFile, content, 'utf8');
  console.log(`üìÅ Archived to history: ${historyFile}`);
}

function writeReadme(content: string): void {
  const readmePath = join(process.cwd(), 'README.md');
  writeFileSync(readmePath, content, 'utf8');
  console.log(`üìù Generated README.md`);
}

function writeContentFile(content: string): void {
  const contentDir = join(process.cwd(), 'content');
  ensureDirectoryExists(contentDir);
  
  const contentFile = join(contentDir, 'profile.md');
  writeFileSync(contentFile, content, 'utf8');
  console.log(`üìÑ Generated content/profile.md for Astro site`);
}

function main(): void {
  console.log('ü•ü Starting daily profile generation...');
  
  const content = generateProfileContent();
  const markdown = createMarkdown(content);
  
  // Write to all target locations
  writeReadme(markdown);
  writeContentFile(markdown);
  writeToHistory(markdown, content.date);
  
  console.log(`‚úÖ Profile generation complete for ${content.date}!`);
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}